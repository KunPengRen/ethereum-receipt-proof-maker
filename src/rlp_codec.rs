use crate::nibble_utils::{get_nibbles_from_bytes, Nibbles};
use crate::types::{Bytes, Receipt, Result};
use ethereum_types::U256;
use rlp::RlpStream;

fn rlp_encode_receipt(receipt: &Receipt) -> Result<Bytes> {
    let mut rlp_stream = RlpStream::new();
    rlp_stream.append(receipt);
    Ok(rlp_stream.out())
}

pub fn rlp_encode_transaction_index(index: &U256) -> Result<Bytes> {
    let mut rlp_stream = RlpStream::new();
    rlp_stream.append(&index.as_usize());
    Ok(rlp_stream.out())
}

pub fn get_rlp_encoded_receipt_and_encoded_key_tuple(
    receipt: &Receipt,
) -> Result<(Nibbles, Bytes)> {
    rlp_encode_receipt(receipt).and_then(|rlp_encoded_receipt| {
        Ok((
            get_nibbles_from_bytes(rlp_encode_transaction_index(&receipt.transaction_index)?),
            rlp_encoded_receipt,
        ))
    })
}

pub fn get_rlp_encoded_receipts_and_nibble_tuples(
    receipts: &[Receipt],
) -> Result<Vec<(Nibbles, Bytes)>> {
    receipts
        .iter()
        .map(|receipt| get_rlp_encoded_receipt_and_encoded_key_tuple(receipt))
        .collect::<Result<Vec<(Nibbles, Bytes)>>>()
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::test_utils::{get_expected_receipt, get_expected_receipt_2, get_expected_receipt_3};

    fn get_expected_receipt_nibbles() -> Nibbles {
        get_nibbles_from_bytes(vec![0x60])
    }

    fn get_rlp_encoded_receipt_1() -> Bytes {
        vec![
            249, 1, 197, 1, 131, 120, 240, 40, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 32, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 187, 248, 185, 148, 6, 1, 44, 140, 249,
            123, 234, 213, 222, 174, 35, 112, 112, 249, 88, 127, 142, 122, 38, 109, 225, 160, 36,
            30, 160, 60, 162, 2, 81, 128, 80, 132, 210, 125, 68, 64, 55, 28, 52, 160, 184, 95, 241,
            8, 246, 187, 86, 17, 36, 143, 115, 129, 139, 128, 184, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 34, 209, 163, 42, 11, 229, 31, 113, 112, 47, 143, 100, 197, 110, 81, 199, 86,
            11, 47, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 25, 88, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 25, 86, 226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 165, 53,
        ]
    }

    fn get_rlp_encoded_receipt_2() -> Bytes {
        // NOTE: For tx hash: 0x4c12e5947bee0e40b3939b6f56d90108f62b73012ab49210bde64647fc0ea986
        vec![
            249, 6, 237, 1, 131, 97, 208, 167, 185, 1, 0, 0, 0, 128, 32, 0, 0, 0, 0, 0, 64, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
            0, 0, 128, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 8, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 16, 0,
            32, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 129, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
            0, 0, 0, 8, 24, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 16, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 128, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 64, 0, 0,
            128, 0, 16, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 249, 5, 226, 248, 155, 148,
            4, 171, 237, 162, 1, 133, 10, 192, 18, 65, 97, 240, 55, 239, 215, 12, 116, 221, 199,
            76, 248, 99, 160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55,
            141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 160,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 63, 128, 130, 134, 99, 228, 78, 15, 253, 94,
            180, 153, 104, 109, 193, 204, 199, 132, 118, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            24, 183, 59, 12, 38, 139, 216, 11, 122, 30, 85, 149, 156, 9, 0, 135, 131, 12, 159, 28,
            160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 27, 85, 33,
            69, 124, 116, 61, 214, 76, 249, 1, 58, 148, 31, 232, 29, 59, 126, 68, 45, 134, 189,
            179, 93, 153, 224, 44, 32, 57, 18, 176, 52, 94, 225, 160, 19, 35, 71, 4, 240, 77, 51,
            43, 5, 170, 22, 229, 156, 4, 147, 31, 173, 106, 221, 60, 238, 74, 114, 23, 123, 40, 82,
            113, 3, 97, 153, 61, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 18, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 26, 2, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 158, 121, 89, 247, 217, 121, 133, 6, 138, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 249, 191, 111, 12,
            133, 70, 105, 168, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 13, 27, 85, 33, 69, 124, 116, 61, 214, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 120, 246, 90, 185, 58, 126, 45, 15, 39, 195, 220, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 201, 124, 50, 64, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 83, 160,
            210, 49, 60, 0, 0, 248, 217, 148, 24, 183, 59, 12, 38, 139, 216, 11, 122, 30, 85, 149,
            156, 9, 0, 135, 131, 12, 159, 28, 225, 160, 189, 168, 87, 126, 36, 105, 34, 210, 154,
            8, 3, 50, 172, 69, 4, 187, 252, 140, 84, 162, 169, 145, 37, 58, 28, 220, 212, 246, 131,
            106, 129, 161, 184, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 160, 101, 142, 174,
            10, 60, 189, 249, 35, 100, 250, 202, 82, 111, 216, 187, 185, 156, 161, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 224, 18, 15, 168, 181, 242, 99, 232, 253, 221, 23, 237, 77, 15,
            47, 117, 20, 3, 126, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 37, 150, 55, 220,
            215, 76, 118, 119, 129, 227, 123, 198, 19, 60, 214, 166, 138, 161, 97, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            90, 248, 185, 148, 24, 183, 59, 12, 38, 139, 216, 11, 122, 30, 85, 149, 156, 9, 0, 135,
            131, 12, 159, 28, 225, 160, 39, 214, 130, 156, 58, 49, 63, 241, 18, 189, 223, 73, 116,
            0, 49, 130, 73, 10, 46, 86, 56, 142, 59, 48, 154, 19, 254, 226, 175, 160, 189, 107,
            184, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 3, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 175, 13, 178, 254, 141, 159, 198, 248, 155, 148, 4, 171,
            237, 162, 1, 133, 10, 192, 18, 65, 97, 240, 55, 239, 215, 12, 116, 221, 199, 76, 248,
            99, 160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170,
            149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 183, 59, 12, 38, 139, 216, 11, 122, 30, 85, 149, 156, 9,
            0, 135, 131, 12, 159, 28, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 119, 140, 144,
            117, 251, 131, 202, 223, 233, 69, 110, 243, 195, 186, 205, 59, 222, 254, 113, 160, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 159, 17, 6, 167, 127,
            74, 114, 196, 117, 248, 155, 148, 4, 171, 237, 162, 1, 133, 10, 192, 18, 65, 97, 240,
            55, 239, 215, 12, 116, 221, 199, 76, 248, 99, 160, 221, 242, 82, 173, 27, 226, 200,
            155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40,
            245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 183, 59,
            12, 38, 139, 216, 11, 122, 30, 85, 149, 156, 9, 0, 135, 131, 12, 159, 28, 160, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 18, 15, 168, 181, 242, 99, 232, 253, 221, 23, 237, 77,
            15, 47, 117, 20, 3, 126, 55, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 26, 215, 184, 150, 15, 84, 229, 222, 229, 248, 155, 148, 4, 171, 237,
            162, 1, 133, 10, 192, 18, 65, 97, 240, 55, 239, 215, 12, 116, 221, 199, 76, 248, 99,
            160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149,
            43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 24, 183, 59, 12, 38, 139, 216, 11, 122, 30, 85, 149, 156, 9, 0,
            135, 131, 12, 159, 28, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 160, 101, 142,
            174, 10, 60, 189, 249, 35, 100, 250, 202, 82, 111, 216, 187, 185, 156, 161, 160, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 97, 108, 98, 7, 237,
            212, 229, 50, 242, 248, 153, 148, 24, 183, 59, 12, 38, 139, 216, 11, 122, 30, 85, 149,
            156, 9, 0, 135, 131, 12, 159, 28, 225, 160, 33, 207, 206, 122, 25, 64, 86, 14, 147, 36,
            109, 4, 10, 4, 119, 202, 247, 135, 213, 248, 165, 141, 197, 227, 86, 253, 111, 58, 91,
            185, 182, 79, 184, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 10, 97, 108, 98, 7, 237, 212, 229, 50, 242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 215, 184, 150, 15, 84, 229, 222, 229, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 159, 17, 6, 167, 127, 74, 114,
            196, 117,
        ]
    }

    fn get_rlp_encoded_receipt_3() -> Bytes {
        // NOTE: For tx hash: "0x88aa6adb8a060c636fc44313036e38de4368d28706315c1a8a29fdef76f5f52a"
        vec![
            249, 1, 9, 128, 131, 98, 64, 196, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
        ]
    }

    #[test]
    fn should_rlp_encode_receipt() {
        let result = rlp_encode_receipt(&get_expected_receipt()).unwrap();
        assert!(result == get_rlp_encoded_receipt_1())
    }

    #[test]
    fn should_rlp_encode_receipt_sample_2() {
        let result = rlp_encode_receipt(&get_expected_receipt_2()).unwrap();
        assert!(result == get_rlp_encoded_receipt_2())
    }

    #[test]
    fn should_rlp_encode_receipt_sample_3() {
        let result = rlp_encode_receipt(&get_expected_receipt_3()).unwrap();
        println!("Expected: {:?}", get_rlp_encoded_receipt_3());
        println!("Actual  : {:?}", result);
        assert!(result == get_rlp_encoded_receipt_3())
    }

    #[test]
    fn should_get_encoded_receipt_and_hash_tuple() {
        let result =
            get_rlp_encoded_receipt_and_encoded_key_tuple(&get_expected_receipt()).unwrap();
        assert!(result.0 == get_expected_receipt_nibbles());
        assert!(result.1 == get_rlp_encoded_receipt_1());
    }

    #[test]
    fn should_get_encoded_receipts_and_hash_tuples() {
        let receipts = vec![get_expected_receipt(), get_expected_receipt()];
        let results = get_rlp_encoded_receipts_and_nibble_tuples(&receipts).unwrap();
        results
            .iter()
            .map(|result| {
                assert!(result.0 == get_expected_receipt_nibbles());
                assert!(result.1 == get_rlp_encoded_receipt_1());
            })
            .for_each(drop);
    }

    #[test]
    fn should_encode_tx_receipt() {
        let index_u256 = U256::from_dec_str("3").unwrap();
        let result = rlp_encode_transaction_index(&index_u256).unwrap();
        let expected_result = vec![0x03];
        assert!(result == expected_result);
    }

    #[test]
    fn should_encode_tx_receipt_of_0() {
        let index_u256 = U256::from_dec_str("0").unwrap();
        let result = rlp_encode_transaction_index(&index_u256).unwrap();
        let expected_result = vec![0x80];
        assert!(result == expected_result);
    }
}
